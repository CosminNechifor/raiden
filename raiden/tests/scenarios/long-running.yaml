settings:
  gas_price: "fast"

token:
  decimals: 3

nodes:
  commands:
    #start: "docker start raiden_{:02d}"
    #stop: "docker stop raiden_{:02d}"
    #kill: "docker kill raiden_{:02d}"
    stop: "pkill -f '127.0.0.1:50{:02d}'"
    kill: "pkill -9 -f '127.0.0.1:50{:02d}'"
    start: "raiden --config-file raiden_{0:02d}.toml --api-address 127.0.0.1:50{0:02d}"
  range:
    first: 1
    last: 4
    template: "127.0.0.1:50{:02d}"


# This implements the scenario writen here:
# https://github.com/raiden-network/raiden/issues/2756
# Where: A = 0, B = 1, C = 2, D = 3, E = 4

scenario:
  serial:
    name: "Long running scenario"
    tasks:
      - parallel:
          name: "Create channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 0, expected_http_status: 201}
            - open_channel: {from: 1, to: 2, total_deposit: 0, expected_http_status: 201}
            - open_channel: {from: 2, to: 3, total_deposit: 0, expected_http_status: 201}
      - serial:
          name: "Allow time for nodes to learn about their channels"
          tasks:
            - wait: 10
      - parallel:
          name: "Verify if channels were opened correctly"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 0, balance: 0,  state: "opened"}
      - parallel:
          name: "A B C D make a deposit of 100 to their channels"
          tasks:
            - deposit: {from: 0, to: 1, total_deposit: 100}
            - deposit: {from: 1, to: 0, total_deposit: 100}
            - deposit: {from: 1, to: 2, total_deposit: 100}
            - deposit: {from: 2, to: 1, total_deposit: 100}
            - deposit: {from: 2, to: 3, total_deposit: 100}
            - deposit: {from: 3, to: 2, total_deposit: 100}
      - parallel:
          name: "Checking if the deposit was successful"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 100, balance: 100, state: "opened"}
      - parallel:
          name: "Deposit to a channel that does not exist"
          tasks:
            # Node tries to deposit to an unexisting channel
            - deposit: {from: 4, to: 3, total_deposit: 20, expected_http_status: 409}
            # Node tries to deposit less then the total deposit in two of his channels
            - deposit: {from: 1, to: 0, total_deposit: 50, expected_http_status: 409}
            - deposit: {from: 1, to: 2, total_deposit: 50, expected_http_status: 409}
            # Opening a channel, but the channel already exists
            - open_channel: {from: 1, to: 0, total_deposit: 100, expected_http_status: 409}
      - serial:
          name: "Give the nodes time to sync"
          tasks:
            - wait: 10
      - parallel:
          name: "Checking for the channel state to be unchanged"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 100, balance: 100, state: "opened"}
      - serial:
          name: "C tries different cases"
          tasks:
            - open_channel: {from: 2, to: 4, total_deposit: 0, expected_http_status: 201}
            - wait: 10
            - deposit: {from: 2, to: 4, total_deposit: 100}
            - wait: 10
            # Try to make a deposit smaller the the amount that was deposited
            - deposit: {from: 2, to: 4, total_deposit: 30, expected_http_status: 409}
            # Make a deposit bigger then the depsited amount
            - deposit: {from: 2, to: 4, total_deposit: 150}
      - parallel:
          name: "Verify the channels"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 100, balance: 100, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 100, balance: 100, state: "opened"}
            # New channel
            - assert: {from: 2, to: 4, total_deposit: 150, balance: 150, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 0, state: "opened"}
      - serial:
          name: "Open a channel with a deposit bigger then the Red Eyes limit"
          tasks:
            - open_channel: {from: 0, to: 4, total_deposit: 1000000000000, expected_http_status: 409}
      - serial:
          name: "Continue building the network"
          tasks:
            # A opens a channel with E
            - open_channel: {from: 0, to: 4, total_deposit: 10, expected_http_status: 201}
            - assert: {from: 0, to: 4, total_deposit: 10, balance: 10, state: "opened"}
            # E deposits 25 tokens onto the A - E channel
            - deposit: {from: 4, to: 0, total_deposit: 25}
            # A performs a payment to E of 50 tokens (path A<->B<->C<->E)
            - transfer: {from: 0, to: 4, amount: 50, expected_http_status: 200}
            - wait: 5
            - assert: {from: 0, to: 1, total_deposit: 100, balance: 50, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100, balance: 150, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100, balance: 50, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100, balance: 150, state: "opened"}
            - assert: {from: 2, to: 4, total_deposit: 150, balance: 100, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 50, state: "opened"}
            # C sends all of its tokens to B (one transfer)
            - transfer: {from: 2, to: 1, amount: 150, eexpected_http_status: 200}
            - assert: {from: 2, to: 1, total_deposit: 100, balance: 0, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100, balance: 200, state: "opened"}
            # C tries to send another > 25 tokens payment to B (fail no route with enough capacity)
            - transfer: {from: 2, to: 1, amount: 150, eexpected_http_status: 409}
      - serial:
          name: "Multiple multi hop payments"
          repeat: 10
          tasks:
            # C sends 10 payments of 1 token to B by using the C <-> E <-> A <-> B route
            - transfer: {from: 2, to: 1, amount: 1}
            - wait: 1
      - parallel:
          name: "Verify state of the network"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100, balance: 40, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100, balance: 160, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100, balance: 50, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100, balance: 150, state: "opened"}
            - assert: {from: 2, to: 4, total_deposit: 150, balance: 100, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 50, state: "opened"}










